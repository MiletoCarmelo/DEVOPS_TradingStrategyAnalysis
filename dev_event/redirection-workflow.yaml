apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: trading-strategy-analysis-template
  namespace: argo-events
spec:
  entrypoint: create-and-redirect
  arguments:
    parameters:
      - name: base-name
        value: "trading-strategy-analysis"
  templates:
    - name: create-and-redirect
      steps:
        - - name: generate-unique-name
            template: generate-unique-name
            arguments:
              parameters:
                - name: base-name
                  value: "{{workflow.parameters.base-name}}"
        - - name: create-pod
            template: create-pod
            arguments:
              parameters:
                - name: pod-name
                  value: "{{steps.generate-unique-name.outputs.result}}"
        - - name: wait-for-pod
            template: wait-for-pod
            arguments:
              parameters:
                - name: pod-name
                  value: "{{steps.generate-unique-name.outputs.result}}"
        - - name: log-pod-ready
            template: log
            arguments:
              parameters:
                - name: message
                  value: "Pod {{steps.generate-unique-name.outputs.result}} is ready"
        - - name: tail-logs
            template: tail-logs
            arguments:
              parameters:
                - name: pod-name
                  value: "{{steps.generate-unique-name.outputs.result}}"
        - - name: redirect
            template: redirect
            arguments:
              parameters:
                - name: pod-name
                  value: "{{steps.generate-unique-name.outputs.result}}"
        - - name: log-redirect
            template: log
            arguments:
              parameters:
                - name: message
                  value: "Redirected to: {{steps.redirect.outputs.result}}"
    
    - name: generate-unique-name
      inputs:
        parameters:
          - name: base-name
      script:
        image: python:alpine3.6
        command: [python]
        source: |
          import sys
          import re
          import uuid
          
          base_name = "{{inputs.parameters.base-name}}".lower()
          # Replace any character that's not alphanumeric, '-', or '.' with '-'
          clean_name = re.sub(r'[^a-z0-9\-\.]', '-', base_name)
          # Ensure it starts and ends with an alphanumeric character
          clean_name = re.sub(r'^[^a-z0-9]+', '', clean_name)
          clean_name = re.sub(r'[^a-z0-9]+$', '', clean_name)
          # If the name is empty after cleaning, use a default name
          if not clean_name:
              clean_name = "trading-strategy-analysis"
          
          # Append a short UUID to ensure uniqueness
          unique_name = f"{clean_name}-{uuid.uuid4().hex[:6]}"
          
          with open('/tmp/unique-name', 'w') as f:
              f.write(unique_name)
      outputs:
        parameters:
          - name: result
            valueFrom:
              path: /tmp/unique-name
    
    - name: create-pod
      inputs:
        parameters:
          - name: pod-name
      resource:
        action: create
        setOwnerReference: true
        manifest: |
          apiVersion: v1
          kind: Pod
          metadata:
            name: "{{inputs.parameters.pod-name}}"
            labels:
              app: trading-strategy-analysis
          spec:
            containers:
            - name: trading-strategy-analysis
              image: <<AAA>>
              ports:
              - containerPort: 8080
    
    - name: wait-for-pod
      inputs:
        parameters:
          - name: pod-name
      resource:
        action: get
        successCondition: status.phase == Running
        failureCondition: status.phase in (Failed, Unknown)
        manifest: |
          apiVersion: v1
          kind: Pod
          metadata:
            name: "{{inputs.parameters.pod-name}}"
            namespace: {{workflow.namespace}}
    
    - name: tail-logs
      inputs:
        parameters:
          - name: pod-name
      container:
        image: bitnami/kubectl
        command: [sh, -c]
        args: ["kubectl logs -f {{inputs.parameters.pod-name}} -n {{workflow.namespace}} & sleep 30; kill %1"]
    
    - name: redirect
      inputs:
        parameters:
          - name: pod-name
      http:
        url: "http://{{inputs.parameters.pod-name}}:8080"
      outputs:
        parameters:
          - name: result
            valueFrom:
              path: /url
    
    - name: log
      inputs:
        parameters:
          - name: message
      container:
        image: alpine
        command: [echo]
        args: ["{{inputs.parameters.message}}"]